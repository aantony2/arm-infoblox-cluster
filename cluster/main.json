{
  "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion":"1.0.0.0",
  "parameters":{
    "baseUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/agnelantony2/arm-infoblox-cluster/master/cluster/",
      "metadata": {
        "description": "Base URL for dependent assets."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().Location]",
      "metadata": {
        "description": "Location of resources."
      }
    },
     "vmNamePrefix":{
      "type":"string",
      "defaultValue":"azw1-nmgt-ns0",
      "metadata":{
        "description":"Name prefix for the Virtual Machine."
      }
    },
     "deploymentPrefix":{
      "type":"string",
      "defaultValue":"azw1-nmgt-ns",
      "metadata":{
        "description":"Name prefix for the Virtual Machine."
      }
    },
    "vmSize":{
      "type":"string",
      "metadata":{
        "description":"Size of the Virtual Machine."
      },
      "allowedValues":[
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2"
      ]
    },
    "niosModel":{
      "type":"string",
      "defaultValue":"vnios-te-v1420",
      "metadata":{
        "description":"niosModel."
      },
      "allowedValues":[
        "vnios-te-v820",
        "vnios-te-v1420",
        "vnios-te-v2220",
        "vnios-cp-v800",
        "vnios-cp-v1400",
        "vnios-cp-v2200"
      ]
    },
    "niosVersion":{
      "type":"string",
      "defaultValue":"latest",
      "metadata":{
        "description":"niosVersion"
      },
      "allowedValues":[
        "latest",
        "800.343389.3",
        "810.352813.0"
      ]
    },
    "adminPassword":{
      "type":"securestring",
      "defaultValue":"",
      "metadata":{
        "description":"Password for the Virtual Machine."
      }
    },
    "virtualNetworkName":{
      "type":"string",
      "defaultValue":"NIOS_Network",
      "metadata":{
        "description":"VNet name"
      }
    },
     "storageAccountName":{
      "type":"string",
      "metadata":{
        "description":"Unique Name for Storage Account where the Virtual Machine's disks will be placed."
      }
    },
    "storageAccountType":{
      "type":"string",
      "defaultValue":"Premium_LRS",
      "allowedValues":[
        "Premium_LRS",
        "Standard_LRS"
      ],
      "metadata":{
        "description":"The type of storage account created."
      }
    },
    "existingVnetResourceGroupName":{
      "type":"string",
      "metadata":{
        "description":"Existing Vnet Resource Group Name."
      }
    },
    "lan1SubnetName":{
      "type":"string",
      "metadata":{
        "description":"LAN1 Subnet Name"
      }
    },
    "mgmtSubnetName":{
      "type":"string",
      "metadata":{
        "description":"LAN1 Subnet Name"
      }
    },
     "customData":{
      "type":"string",
      "defaultValue":"",
      "metadata":{
        "description":"Use space and '\n' symbols for indentation. Some custom data parameter are not available for Azure, please refer to Azure NIOS Guide for allowed parameters."
      }
    },
    "tempLicenseOption":{
      "type":"string",
      "defaultValue":"none",
      "allowedValues":[
        "none",
        "TE",
        "CP",
        "TE-SoT"
      ],
      "metadata":{
        "description":"Temporary license option."
      }
    }
  },
  "variables":{
    "apiVersion":"2016-06-01",
    "imagePublisher":"infoblox",
    "imageOffer":"infoblox-vnios-te-v1420",
    "imageSKU": "[parameters('niosModel')]",
    "version": "[parameters('niosVersion')]",
    "OSDiskName":"[concat(parameters('deploymentPrefix'), uniqueString(resourceGroup().id, deployment().name))]",
    "vmStorageAccountContainerName":"disks",
    "tempLicense": "[variables(concat('tempLicense-', parameters('tempLicenseOption')))]",
    "tempLicense-TE": "vnios enterprise dns cloud",
    "tempLicense-CP": "vnios enterprise dns cloud_api",
    "tempLicense-TE-SoT": "[concat('nios ', parameters('niosModel'), ' enterprise dns cloud')]",
    "tempLicense-none": "",
    "vnetResourceId":"[resourceId(parameters('existingVnetResourceGroupName'),concat('Microsoft.Network','/','virtualNetworks'),parameters('virtualNetworkName'))]",
    "lan1SubnetResourceId":"[concat(variables('vnetResourceId'),'/subnets/',parameters('lan1SubnetName'))]",
    "mgmtSubnetResourceId":"[concat(variables('vnetResourceId'),'/subnets/',parameters('mgmtSubnetName'))]",
    "nsgName": "[concat(parameters('deploymentPrefix'),'-nsg')]",
    "storageAccountNameDiag":"[concat(parameters('storageAccountName'),'diag')]",
    "storageAccountSetupUrl":"[concat(parameters('baseUrl'),'/storageAccount','.json')]",
    "networkInterfaceSetupUrl":"[concat(parameters('baseUrl'),'/networkInterface','.json')]",
    "networkInterfaceLbSetupUrl":"[concat(parameters('baseUrl'),'/networkInterfaceLB','.json')]",
    "availabilitySetSetupUrl":"[concat(parameters('baseUrl'),'/availabilitySet','.json')]",
    "virtualMachineSetUrl":"[concat(parameters('baseUrl'),'/virtualMachineSet','.json')]",
    "availabilitySetName":"[concat(parameters('deploymentPrefix'),'-az')]",
    "loadBalancerName":"[concat(parameters('deploymentPrefix'),'-lb')]",
    "loadBalancerResourceId":"[resourceId('Microsoft.Network/loadBalancers/',variables('loadBalancerName'))]",
    "sq":"'",
    "customData": "[base64(concat('default_admin_password: ', variables('sq'), replace(parameters('adminPassword'), variables('sq'), concat(variables('sq'), variables('sq'))), variables('sq'), '\n', parameters('customData')))]",
    "numberOfInstances":2
  },
  "resources":[
    {
      "name":"DeployingStorageAccount",
      "type":"Microsoft.Resources/deployments",
      "apiVersion":"[variables('apiVersion')]",
      "properties":{
        "mode":"Incremental",
        "templateLink":{
          "uri":"[variables('storageAccountSetupUrl')]",
          "contentVersion":"1.0.0.0"
        },
        "parameters":{
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountType":{
            "value":"[parameters('storageAccountType')]"
          },
          "storageAccountName":{
            "value":"[parameters('storageAccountName')]"
          }
        }
      }
    },
    {
      "name":"DeployingStorageAccountForDiagnosticsLog",
      "type":"Microsoft.Resources/deployments",
      "apiVersion":"[variables('apiVersion')]",
      "properties":{
        "mode":"Incremental",
        "templateLink":{
          "uri":"[variables('storageAccountSetupUrl')]",
          "contentVersion":"1.0.0.0"
        },
        "parameters":{
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountType":{
            "value":"[parameters('storageAccountType')]"
          },
          "storageAccountName":{
            "value":"[variables('storageAccountNameDiag')]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh-in",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "dns-in",
            "properties": {
              "description": "Allow DNS",
              "protocol": "Udp",
              "sourcePortRange": "*",
              "destinationPortRange": "53",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "https-in",
            "properties": {
              "description": "Allow HTTPS",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          },
          {
            "name": "grid_traffic_UDP_1194_in",
            "properties": {
              "description": "Allow vNIOS Grid traffic 1194 Inbound",
              "protocol": "Udp",
              "sourcePortRange": "*",
              "destinationPortRange": "1194",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 103,
              "direction": "Inbound"
            }
          },
          {
            "name": "grid_traffic_UDP_2114_in",
            "properties": {
              "description": "Allow vNIOS Grid traffic 2114 Inbound",
              "protocol": "Udp",
              "sourcePortRange": "*",
              "destinationPortRange": "2114",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 104,
              "direction": "Inbound"
            }
          },
          {
            "name": "grid_traffic_UDP_1194_out",
            "properties": {
              "description": "Allow vNIOS Grid traffic 1194 Outbound",
              "protocol": "Udp",
              "sourcePortRange": "*",
              "destinationPortRange": "1194",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          },
          {
            "name": "grid_traffic_UDP_2114_out",
            "properties": {
              "description": "Allow vNIOS Grid traffic 2114 Outbound",
              "protocol": "Udp",
              "sourcePortRange": "*",
              "destinationPortRange": "2114",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 106,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "name":"[concat(parameters('vmNamePrefix'), copyindex(1), '-lan1')]",
      "type":"Microsoft.Resources/deployments",
      "apiVersion":"[variables('apiVersion')]",
      "copy": {
        "name": "Lan1NetworkInterfaceLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn":[
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties":{
        "mode":"Incremental",
        "templateLink":{
          "uri":"[variables('networkInterfaceLbSetupUrl')]",
          "contentVersion":"1.0.0.0"
        },
        "parameters":{
          "location": {
            "value": "[parameters('location')]"
          },
          "nicName":{
            "value":"[concat(parameters('vmNamePrefix'), copyindex(1), '-lan1')]"
          },
          "subnetId":{
            "value":"[variables('lan1SubnetResourceId')]"
          },
          "networkSecurityGroupId":{
            "value":"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
          },
           "loadBalancerResourceId":{
            "value":"[variables('loadBalancerResourceId')]"
          }
        }
      }
    },
    {
      "name":"[concat(parameters('vmNamePrefix'), copyindex(1), '-mgmt')]",
      "type":"Microsoft.Resources/deployments",
      "apiVersion":"[variables('apiVersion')]",
      "copy": {
        "name": "MgmtNetworkInterfaceLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn":[
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
      ],
      "properties":{
        "mode":"Incremental",
        "templateLink":{
          "uri":"[variables('networkInterfaceSetupUrl')]",
          "contentVersion":"1.0.0.0"
        },
        "parameters":{
          "location": {
            "value": "[parameters('location')]"
          },
          "nicName":{
            "value":"[concat(parameters('vmNamePrefix'), copyindex(1), '-mgmt')]"
          },
          "subnetId":{
            "value":"[variables('mgmtSubnetResourceId')]"
          },
          "networkSecurityGroupId":{
            "value":"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
          }
        }
      }
    },
    {
      "name":"DeployingAvailabilitySet",
      "type":"Microsoft.Resources/deployments",
      "apiVersion":"[variables('apiVersion')]",
      "properties":{
        "mode":"Incremental",
        "templateLink":{
          "uri":"[variables('availabilitySetSetupUrl')]",
          "contentVersion":"1.0.0.0"
        },
        "parameters":{
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilitySetName":{
            "value":"[variables('availabilitySetName')]"
          }
        }
      }
    },
    {
      "name":"[concat(parameters('vmNamePrefix'), copyindex(1))]",
      "type":"Microsoft.Resources/deployments",
      "apiVersion":"[variables('apiVersion')]",
      "copy": {
        "name": "VirtualMachineLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn":[
        "[concat('Microsoft.Resources/deployments/', 'DeployingStorageAccount')]",
        "[concat('Microsoft.Resources/deployments/', 'DeployingStorageAccountForDiagnosticsLog')]",
        "[concat('Microsoft.Resources/deployments/', parameters('vmNamePrefix'), copyindex(1), '-lan1')]",
        "[concat('Microsoft.Resources/deployments/', parameters('vmNamePrefix'), copyindex(1), '-mgmt')]",
        "[concat('Microsoft.Resources/deployments/', 'DeployingAvailabilitySet')]"
      ],
      "properties":{
        "mode":"Incremental",
        "templateLink": {
          "uri":"[variables('virtualMachineSetUrl')]",
          "contentVersion":"1.0.0.0"
        },
        "parameters":{
          "vmName": {
            "value" :"[concat(parameters('vmNamePrefix'), copyindex(1))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "plan": {
            "value" : {
              "publisher": "[variables('imagePublisher')]",
              "product": "[variables('imageOffer')]",
              "name": "[variables('imageSKU')]"
            }
          },
          "hardwareProfile": {
            "value" : {
              "vmSize":"[parameters('vmSize')]"
            }
          },
          "osProfile": {
            "value" : {
              "computerName":"[concat(parameters('vmNamePrefix'), copyindex(1))]",
              "adminUsername":"[uniqueString(resourceGroup().Id)]",
              "adminPassword":"[parameters('adminPassword')]",
              "customData": "[variables('customData')]"
            }
          },
          "storageProfile": {
            "value" : {
              "imageReference":{
                "publisher":"[variables('imagePublisher')]",
                "offer":"[variables('imageOffer')]",
                "sku":"[variables('imageSKU')]",
                "version":"[variables('version')]"
              },
              "osDisk":{
                "name":"[variables('OSDiskName')]",
                "vhd":{
                  "uri":"[concat(reference('DeployingStorageAccount').outputs.endpointURL.value, variables('vmStorageAccountContainerName'), '/', variables('OSDiskName'), '.vhd')]"
                },
                "caching":"ReadWrite",
                "createOption":"FromImage"
              }
            }
          },
          "networkProfile": {
            "value" : {
              "networkInterfaces":[
                {
                  "id":"[resourceId('Microsoft.Network/networkInterfaces/', parameters('vmNamePrefix'), copyindex(1), '-lan1')]",
                  "properties":{ "primary":true }
                },
                {
                  "id":"[resourceId('Microsoft.Network/networkInterfaces/', parameters('vmNamePrefix'), copyindex(1), '-mgmt')]",
                  "properties":{ "primary":false }
                }
              ]
            }
          },
          "diagnosticsProfile": {
            "value" : {
              "bootDiagnostics": {
                "enabled": "true",
                "storageUri": "[reference('DeployingStorageAccountForDiagnosticsLog').outputs.endpointURL.value]"
              }
            }
          },
          "availabilitySet": {
            "value" : {
              "id": "[resourceId('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
            }
          }
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[variables('lan1SubnetResourceId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "LoadBalancerFrontend"
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/BackendPool1')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/DefaultProbe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 8080,
              "idleTimeoutInMinutes": 15
            },
            "Name": "DefaultRule"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 8080,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "DefaultProbe"
          }
        ]
      }
    }
    ]
}